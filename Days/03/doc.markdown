# পাইথনে লুপ

## ভূমিকা

পাইথনে লুপ হলো এমন একটি প্রক্রিয়া যা দিয়ে আমরা কোনো কোড ব্লক বা নির্দেশনা একাধিকবার চালাতে পারি। এটি প্রোগ্রামিংয়ে সময় এবং কোড বাঁচাতে সাহায্য করে। পাইথনে মূলত দুই ধরনের লুপ ব্যবহৃত হয়: **for লুপ** এবং **while লুপ**।

## for লুপ

**for লুপ** ব্যবহার করা হয় যখন আমরা জানি কতবার কোনো কোড চালাতে হবে। এটি সাধারণত কোনো সিকোয়েন্স (যেমন: লিস্ট, স্ট্রিং, বা রেঞ্জ) এর উপর কাজ করে।

### উদাহরণ ১: ১ থেকে ৫ পর্যন্ত সংখ্যা প্রিন্ট করা

```python
for i in range(1, 6):
    print(i)
```

**আউটপুট:**

```
1
2
3
4
5
```

**ব্যাখ্যা:** এখানে `range(1, 6)` ফাংশন ১ থেকে ৫ পর্যন্ত সংখ্যা তৈরি করে। `i` ভেরিয়েবল প্রতিবার একটি সংখ্যা নিয়ে প্রিন্ট করে।

### উদাহরণ ২: লিস্টের উপাদান প্রিন্ট করা

```python
fruits = ["আপেল", "কলা", "আম"]
for fruit in fruits:
    print(fruit)
```

**আউটপুট:**

```
আপেল
কলা
আম
```

**ব্যাখ্যা:** এখানে `fruits` লিস্টের প্রতিটি উপাদান `fruit` ভেরিয়েবলে নিয়ে প্রিন্ট করা হয়েছে।

### for লুপের স্ট্রাকচার

```python
for variable in sequence:
    # কোড ব্লক যা প্রতিবার চলবে
```

## while লুপ

**while লুপ** তখন ব্যবহৃত হয় যখন আমরা জানি না কতবার লুপ চলবে, কিন্তু একটি শর্ত সত্য থাকা পর্যন্ত লুপ চালাতে চাই।

### উদাহরণ ১: ১ থেকে ৫ পর্যন্ত সংখ্যা প্রিন্ট করা

```python
i = 1
while i <= 5:
    print(i)
    i += 1
```

**আউটপুট:**

```
1
2
3
4
5
```

**ব্যাখ্যা:** এখানে `i` এর মান ১ থেকে শুরু হয়। যতক্ষণ `i` এর মান ৫ এর সমান বা কম থাকে, ততক্ষণ লুপ চলে এবং `i` এর মান ১ করে বাড়ে।

### উদাহরণ ২: ব্যবহারকারীর ইনপুট পর্যন্ত লুপ চালানো

```python
password = ""
while password != "secret":
    password = input("পাসওয়ার্ড দিন: ")
print("সঠিক পাসওয়ার্ড!")
```

**আউটপুট:**

```
পাসওয়ার্ড দিন: test
পাসওয়ার্ড দিন: secret
সঠিক পাসওয়ার্ড!
```

**ব্যাখ্যা:** এখানে লুপ ততক্ষণ চলে যতক্ষণ না ব্যবহারকারী "secret" পাসওয়ার্ডটি ইনপুট দেয়।

### while লুপের স্ট্রাকচার

```python
while condition:
    # কোড ব্লক যা শর্ত সত্য থাকা পর্যন্ত চলবে
    # শর্ত পরিবর্তন করার জন্য ভেরিয়েবল আপডেট করতে হবে
```

## break এবং continue

লুপের মধ্যে **break** এবং **continue** ব্যবহার করে লুপের প্রবাহ নিয়ন্ত্রণ করা যায়।

### উদাহরণ: break ব্যবহার

```python
for i in range(1, 10):
    if i == 5:
        break
    print(i)
```

**আউটপুট:**

```
1
2
3
4
```

**ব্যাখ্যা:** `i` এর মান ৫ হলে `break` লুপটি বন্ধ করে দেয়।

### উদাহরণ: continue ব্যবহার

```python
for i in range(1, 6):
    if i == 3:
        continue
    print(i)
```

**আউটপুট:**

```
1
2
4
5
```

**ব্যাখ্যা:** `i` এর মান ৩ হলে `continue` সেই ইটারেশনটি এড়িয়ে পরের ইটারেশনে চলে যায়।

## উপসংহার

পাইথনে **for** এবং **while** লুপ ব্যবহার করে আমরা বিভিন্ন ধরনের কাজ সহজে করতে পারি। **for** লুপ নির্দিষ্ট সংখ্যক ইটারেশনের জন্য ভালো, আর **while** লুপ শর্তভিত্তিক কাজের জন্য উপযোগী। `break` এবং `continue` ব্যবহার করে আমরা লুপের প্রবাহ আরও নিয়ন্ত্রণ করতে পারি।